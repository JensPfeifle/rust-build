
name: build-rust-macos-x86_64-self-hosted-dispatch

on:
  workflow_dispatch

jobs:
  get_release:
    # https://github.com/octokit/request-action
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
    - uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
        route: GET /repos/{owner}/{repo}/releases/latest
        owner: esp-rs
        repo: rust-build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env:
        response:  ${{ steps.get_latest_release.outputs.data }}

  build-idf-rust:
    name: Build IDF Rust for ${{ matrix.os }}
    # needs: create_release
    needs: get_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-x86_64-self-hosted ]
        include:
        - os: macos-x86_64-self-hosted
          ARCH: ''
          TARGET: win-x64
          ASSET_PATH: 'build/dist/rust-1.58.0-dev-aarch64-apple-darwin.tar.xz'
          ASSET_NAME: 'rust-1.58.0.0-aarch64-apple-darwin.tar.xz'
          ASSET_CONTENT_TYPE: 'application/x-tar'
          LLVM_ROOT_OPTION: ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: esp-rs/rust
          ref: esp-1.58.0.0
          submodules: true
      - name: Set up Python
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Setup Ninja
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Prepare build
        run: |
          python3 src/bootstrap/configure.py ${{ matrix.LLVM_ROOT_OPTION }} --experimental-targets=Xtensa --enable-extended --tools=clippy,cargo,rustfmt --dist-compression-formats='xz' --set rust.jemalloc
      - name: Build with x.py - dist packages
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' }}
        # ignore build failure - workaround for pkgbuild problems
        run: |
          python3 x.py dist --stage 2  || echo "build finished"
        # Excluding src/doc breaks build of 1.55
        #run: python3 x.py dist --stage 2 --exclude src/doc
      - name: Build with x.py - dist packages - with cached LLVM
        if: ${{ matrix.os == 'macos-x86_64-self-hosted' }}
        run: python3 x.py dist --stage 2 --llvm-skip-rebuild TRUE
      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.get_release.outputs.upload_url }}
      #     asset_path: ${{ matrix.ASSET_PATH }}
      #     asset_name: ${{ matrix.ASSET_NAME }}
      #     asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}

